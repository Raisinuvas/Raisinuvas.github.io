<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java入门</title>
    <link href="/2025/06/28/java%E5%85%A5%E9%97%A8/"/>
    <url>/2025/06/28/java%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="java入门1"><a href="#java入门1" class="headerlink" title="java入门1"></a>java入门1</h2><p><img src="a.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++进阶知识点</title>
    <link href="/2025/04/25/C-%E8%BF%9B%E9%98%B6%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <url>/2025/04/25/C-%E8%BF%9B%E9%98%B6%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="Part1-内存分区模型"><a href="#Part1-内存分区模型" class="headerlink" title="Part1. 内存分区模型"></a>Part1. 内存分区模型</h1><p>程序编译后会生成.exe文件，<em>未执行该程序前分为两个区域，就是代码区和全局区</em></p><h2 id="1-代码区"><a href="#1-代码区" class="headerlink" title="1. 代码区"></a>1. 代码区</h2><p><strong>存放函数体的二进制代码，由操作系统进行管理</strong></p><p>代码区是共享的：对于频繁被执行的程序，只需要在内存中存一份即可</p><p>代码区是只读的：防止程序意外地修改了指令</p><h2 id="2-全局区"><a href="#2-全局区" class="headerlink" title="2. 全局区"></a>2. 全局区</h2><p>存放全局变量和静态变量（static）。全局区还包含了常量区，存放字符串常量和其他常量。该区域的数据释放由操作系统管理。</p><h2 id="3-栈区"><a href="#3-栈区" class="headerlink" title="3. 栈区"></a>3. 栈区</h2><p>由编译器自动分配释放，存放函数的参数值、局部变量等。注意<strong>不要返回局部变量的地址</strong>。</p><p>局部变量存放在栈区，栈区的数据在函数执行完后就会自动释放，因此在函数中返回局部变量的地址将会无效</p><h2 id="4-堆区"><a href="#4-堆区" class="headerlink" title="4. 堆区"></a>4. 堆区</h2><p>由程序员分配释放，若程序员不释放，程序结束时由操作系统回收</p><p>在C++中主要利用new在堆区开辟数据</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span>&#123;<br>  <span class="hljs-comment">//数据在栈区</span><br>  <span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br>  <span class="hljs-keyword">return</span> &amp;a;<br>  <br>  <span class="hljs-comment">//数据在堆区</span><br>  <span class="hljs-type">int</span> * p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">10</span>);<span class="hljs-comment">//指针变量还是存放在栈区，但是开辟了一个堆区的空间，只不过堆区数据的地址存放在栈区</span><br>  <span class="hljs-keyword">return</span> p;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>  <span class="hljs-type">int</span> *p = <span class="hljs-built_in">func</span>();<span class="hljs-comment">//堆区的数据会一直存活</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="new操作符"><a href="#new操作符" class="headerlink" title="new操作符"></a>new操作符</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> * <span class="hljs-title">func</span><span class="hljs-params">()</span></span>&#123;<br>  <span class="hljs-type">int</span> * p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">10</span>);<span class="hljs-comment">//new返回该数据类型的指针</span><br>  <span class="hljs-keyword">return</span> p;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span>&#123;<br>  <span class="hljs-type">int</span> * p = <span class="hljs-built_in">func</span>();<br>  <span class="hljs-keyword">delete</span> p;<span class="hljs-comment">//使用delete关键字释放堆区的数据</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func2</span><span class="hljs-params">()</span></span>&#123;<br>  <span class="hljs-type">int</span> * arr = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">10</span>];<span class="hljs-comment">//开辟一个包含10个元素数组空间</span><br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)&#123;<br>    arr[i] = i + <span class="hljs-number">100</span>;<br>  &#125;<br>  <span class="hljs-keyword">delete</span>[] arr;<span class="hljs-comment">//释放数组需要加[]</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Part2-引用"><a href="#Part2-引用" class="headerlink" title="Part2. 引用"></a>Part2. 引用</h1><p>引用的本质：给变量起别名。<code>数据类型 &amp;别名 = 原名;</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> &amp;b = a;<span class="hljs-comment">//本质上是让b也指向了a访问的内存</span><br>b = <span class="hljs-number">20</span>;<span class="hljs-comment">//通过b改变a时，相应的内存值发生了改变，即a的值发生了改变</span><br>cout &lt;&lt; a;<br></code></pre></td></tr></table></figure><p>注意事项：</p><ul><li>引用必须初始化（int &amp;b；是错误的）</li><li>引用一旦初始化后，就不可以更改了（假设b指向a之后，就不能再指向c了）</li></ul><h3 id="引用做函数参数"><a href="#引用做函数参数" class="headerlink" title="引用做函数参数"></a>引用做函数参数</h3><p>作用：函数传参时，可以利用引用让形参修饰实参</p><p>优点：可以简化指针做实参</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//引用传递</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;a, <span class="hljs-type">int</span> &amp;b)</span></span>&#123;<span class="hljs-comment">//对a和b起别名，只不过别名和原名一样</span><br>  <span class="hljs-type">int</span> temp = a;<br>  a = b;<br>  b = temp;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>  <span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br>  <span class="hljs-type">int</span> b = <span class="hljs-number">20</span>;<br>  <span class="hljs-built_in">swap</span>(a, b);<span class="hljs-comment">//引用传递，形参也会修饰实参，可以改变实参的值</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="引用做函数的返回值"><a href="#引用做函数的返回值" class="headerlink" title="引用做函数的返回值"></a>引用做函数的返回值</h3><ul><li>不要返回局部变量的引用</li><li>函数的调用可以作为左值</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span>&amp; <span class="hljs-title">test01</span><span class="hljs-params">()</span></span>&#123;<br>  <span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br>  <span class="hljs-keyword">return</span> a;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span>&amp; <span class="hljs-title">test02</span><span class="hljs-params">()</span></span>&#123;<br>  <span class="hljs-type">static</span> <span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<span class="hljs-comment">//静态变量，存放在全局区</span><br>  <span class="hljs-keyword">return</span> a;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>  <span class="hljs-type">int</span> &amp;ref = <span class="hljs-built_in">test01</span>();<span class="hljs-comment">//错误，不能返回局部变量的引用</span><br>  <span class="hljs-type">int</span> &amp;ref2 = <span class="hljs-built_in">test02</span>();<span class="hljs-comment">//正确，因为使用的是静态变量</span><br>  <span class="hljs-built_in">test02</span>() = <span class="hljs-number">1000</span>；<span class="hljs-comment">//函数调用作为左值，相当于test02()此时是a的引用，再将1000这个值赋值给a，表示将a这块空间的值赋值1000</span><br>  cout &lt;&lt; ref2;<span class="hljs-comment">//输出结果也是1000，因为ref2是a的别名</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="引用的本质"><a href="#引用的本质" class="headerlink" title="引用的本质"></a>引用的本质</h3><p>引用的本质在C++内部实现是一个指针常量</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> &amp; ref = a;<span class="hljs-comment">//本质上创建了一个常量指针名为ref，再将ref指向变量a的地址</span><br><span class="hljs-comment">//指针只能指向一个地址，因此引用不能被修改，只能修改引用指向变量的值</span><br></code></pre></td></tr></table></figure><h3 id="常量引用"><a href="#常量引用" class="headerlink" title="常量引用"></a>常量引用</h3><p>用来修饰形参，防止误操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> &amp; ref = <span class="hljs-number">10</span>;<span class="hljs-comment">//等同于 int temp = 10; coust int &amp; ref = temp;</span><br><span class="hljs-comment">//该值将不能被修改</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span> &amp; val)</span></span>&#123;<br>  val = <span class="hljs-number">1000</span>;<span class="hljs-comment">//错误，由于定义的是const类型引用，val的值将不能被改变，避免在函数体内误修改了实参的值</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>  <span class="hljs-type">int</span> a = <span class="hljs-number">100</span>;<br>  <span class="hljs-built_in">func</span>(a);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Part3-函数高级"><a href="#Part3-函数高级" class="headerlink" title="Part3. 函数高级"></a>Part3. 函数高级</h1><h2 id="1-函数默认参数"><a href="#1-函数默认参数" class="headerlink" title="1. 函数默认参数"></a>1. 函数默认参数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b = <span class="hljs-number">20</span>, <span class="hljs-type">int</span> c = <span class="hljs-number">30</span>)</span></span>&#123;<br>  <span class="hljs-keyword">return</span> a+b+c;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>  cout &lt;&lt; <span class="hljs-built_in">fun</span>(<span class="hljs-number">10</span>);<span class="hljs-comment">//默认b为20，c为30</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意事项：</strong></p><ul><li><p>如果某个位置已经有了默认参数，那么从这个位置往后，从左到右都必须有默认值</p></li><li><p>函数的声明和实现只能一个有默认参数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span> a = <span class="hljs-number">10</span>, <span class="hljs-type">int</span> b = <span class="hljs-number">20</span>)</span></span>;<span class="hljs-comment">//函数声明</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span>&#123;<span class="hljs-comment">//函数定义</span><br>  <span class="hljs-keyword">return</span> a+b;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="2-函数占位参数"><a href="#2-函数占位参数" class="headerlink" title="2. 函数占位参数"></a>2. 函数占位参数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span>)</span></span>&#123;<span class="hljs-comment">//只输入一个数据类型就属于占位参数</span><br>  cout &lt;&lt; <span class="hljs-string">&quot;hello&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>  <span class="hljs-built_in">func</span>(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>);<br>&#125;<br><span class="hljs-comment">//占位参数可以有默认参数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span> a <span class="hljs-type">int</span> = <span class="hljs-number">10</span>)</span></span>&#123;<br>  cout &lt;&lt; <span class="hljs-string">&quot;hello&quot;</span> &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-函数重载"><a href="#3-函数重载" class="headerlink" title="3. 函数重载"></a>3. 函数重载</h2><p>作用：函数名可以相同，提高复用性</p><p>满足的条件：</p><ul><li>同一个作用域下</li><li>函数名称相同</li><li>函数参数<strong>类型不同</strong>或者<strong>个数不同</strong>或者<strong>顺序不同</strong></li></ul><p>注意: 函数的返回值不可以作为函数重载的条件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span>&#123;<br>  cout &lt;&lt; <span class="hljs-string">&quot;hello&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span>&#123;<br>  cout &lt;&lt; <span class="hljs-string">&quot;hello a&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>  <span class="hljs-built_in">func</span>();<br>  <span class="hljs-built_in">func</span>(<span class="hljs-number">10</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>引用可以作为函数重载的条件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;a)</span></span>&#123;<br>  cout &lt;&lt; <span class="hljs-string">&quot;hello a&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span> &amp;a)</span></span>&#123;<br>  cout &lt;&lt; <span class="hljs-string">&quot;hello a&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>  <span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br>  <span class="hljs-built_in">func</span>(a);<span class="hljs-comment">//会调用第一个func，此时a是一个可读可写的变量</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>  <span class="hljs-built_in">func</span>(<span class="hljs-number">10</span>);<span class="hljs-comment">//会调用第二个func，因为第一个不合法，第一个等同于“int &amp; a = 10”，而10是常量</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Part4-类和对象"><a href="#Part4-类和对象" class="headerlink" title="Part4. 类和对象"></a>Part4. 类和对象</h1><p>C++面向对象的三大特性：封装、继承、多态</p><h2 id="1-封装"><a href="#1-封装" class="headerlink" title="1. 封装"></a>1. 封装</h2><p>封装的意义：</p><ul><li>将属性和行为作为一个整体。<code>class 类名&#123; 访问权限：属性/行为&#125;</code></li><li>将属性和行为加以权限控制</li></ul><h3 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//设计一个圆类，求圆的周长</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span>&#123;<br>  <br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-type">int</span> m_r;<span class="hljs-comment">//半径</span><br>  <span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">calculateZC</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span> * PI * m_r;<br>  &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>  Circle c1;<br>  c1.m_r = <span class="hljs-number">10</span>;<br>  cout &lt;&lt; c1.<span class="hljs-built_in">calculateZC</span>();<span class="hljs-comment">//输出圆的周长</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="访问权限"><a href="#访问权限" class="headerlink" title="访问权限"></a>访问权限</h3><p><strong>权限分为三种：public、protected、private</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br><span class="hljs-comment">//公共权限：类内可以访问、类外不可以</span><br><span class="hljs-keyword">public</span>:<br>  <br><span class="hljs-comment">//保护权限：类内可以访问、类外不可以，儿子可以访问父亲中的保护内容</span><br><span class="hljs-keyword">protected</span>:<br><br><span class="hljs-comment">//私有权限：类内可以访问、类外不可以，儿子不可以访问父亲中的保护内容</span><br><span class="hljs-keyword">private</span>:<br>  <br>&#125;;<br></code></pre></td></tr></table></figure><p>struct和class区别：在C++中，两者的唯一区别在于默认的访问权限不同</p><ul><li>struct默认权限为公共</li><li>class默认权限为私有</li></ul><h3 id="成员属性设置为私有"><a href="#成员属性设置为私有" class="headerlink" title="成员属性设置为私有"></a>成员属性设置为私有</h3><blockquote><p>优点：</p><ol><li>可以自己控制读写权限</li><li>对于写可以检测数据有效性</li></ol></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(string name)</span></span>&#123;<br>    m_Name = name;<br>  &#125;<br>  <span class="hljs-function">string <span class="hljs-title">getName</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> m_Name;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> m_Age;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(age &lt; <span class="hljs-number">0</span> || age &gt; <span class="hljs-number">150</span>)&#123;<br>     cout &lt;&lt; <span class="hljs-string">&quot;error&quot;</span>;<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    m_Age = age;<br>  &#125;<br>  <br><span class="hljs-keyword">private</span>:<br>  string m_Name;<span class="hljs-comment">//可读可写</span><br>  <span class="hljs-type">int</span> m_Age = <span class="hljs-number">18</span>;<span class="hljs-comment">//年龄 只读</span><br>  string m_love;<span class="hljs-comment">//只写</span><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>  Person P1;<br>  P1.<span class="hljs-built_in">setName</span>(<span class="hljs-string">&#x27;Person1&#x27;</span>);<span class="hljs-comment">//可以通过类中的接口访问private变量，这样可以很好控制变量的读写权限</span><br>  <br>  P1.<span class="hljs-built_in">setAge</span>(<span class="hljs-number">160</span>);<span class="hljs-comment">//可以控制数据输入的有效性</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-对象"><a href="#2-对象" class="headerlink" title="2. 对象"></a>2. 对象</h2><h3 id="构造函数和析构函数"><a href="#构造函数和析构函数" class="headerlink" title="构造函数和析构函数"></a>构造函数和析构函数</h3><p>构造函数和析构函数如果程序没有创建，编译器也会自动创建，函数体为空</p><ul><li><p>构造函数：用于创建对象时为对象成员属性赋值，构造函数由编译器自动调用，无须手动调用</p><p><code>类名()&#123;&#125;</code> </p></li><li><p>析构函数：用于对象销毁前系统自动调用，执行一些清理工作</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-comment">//构造函数函数名与类名相同，可以有参数，可以发生重载</span><br>  <span class="hljs-built_in">Person</span>()&#123;<br>    <br>  &#125;<span class="hljs-comment">//构造函数，创建对象的时候就会调用</span><br>  ~<span class="hljs-built_in">Person</span>()&#123;<br>    <br>  &#125;<span class="hljs-comment">//析构函数，释放对象的时候调用</span><br>  <br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func1</span><span class="hljs-params">()</span></span>&#123;<br>  Person p;<span class="hljs-comment">//这里就会调用构造函数，同时也会调用析构函数，因为这是局部变量，释放的时候也会自动调用析构函数</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="构造函数的分类及调用"><a href="#构造函数的分类及调用" class="headerlink" title="构造函数的分类及调用"></a>构造函数的分类及调用</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-comment">//无参构造函数=默认构造</span><br>  <span class="hljs-built_in">Person</span>()&#123;<br>    <br>  &#125;<br>  <span class="hljs-comment">//有参构造函数</span><br>  <span class="hljs-built_in">Person</span>(<span class="hljs-type">int</span> a)&#123;<br>    age = a;<br>  &#125;<br>  <span class="hljs-comment">//拷贝构造函数</span><br>  <span class="hljs-built_in">Person</span>(<span class="hljs-type">const</span> Person &amp;p)&#123;<br>    <span class="hljs-comment">//将传入的对象的所有属性拷贝到自身</span><br>    age = p.age;<br>  &#125;<br>  <br>  ~<span class="hljs-built_in">Person</span>()&#123;<br>    <br>  &#125;<span class="hljs-comment">//析构函数，释放对象的时候调用</span><br>  <br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func1</span><span class="hljs-params">()</span></span>&#123;<br>  Person p1;<span class="hljs-comment">//默认构造函数调用。注意：调用默认构造函数的时候不要加“()”</span><br>  <br>  <span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<span class="hljs-comment">//有参构造函数的调用</span><br>  Person p2 = <span class="hljs-built_in">Person</span>(<span class="hljs-number">10</span>);<span class="hljs-comment">//显示法调用</span><br>  Person p2 = <span class="hljs-number">10</span>;<span class="hljs-comment">//隐式转换</span><br>  <br>  <span class="hljs-function">Person <span class="hljs-title">p3</span><span class="hljs-params">(p2)</span></span>;<span class="hljs-comment">//拷贝构造函数的调用</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="拷贝构造函数调用时机"><a href="#拷贝构造函数调用时机" class="headerlink" title="拷贝构造函数调用时机"></a>拷贝构造函数调用时机</h3><h3 id="构造函数调用规则"><a href="#构造函数调用规则" class="headerlink" title="构造函数调用规则"></a>构造函数调用规则</h3><p>C++编译器至少给一个类添加3个函数</p><p>1、默认构造函数</p><p>2、默认析构函数</p><p>3、默认拷贝构造函数（对属性值进行拷贝）</p><ul><li><p>如果用户定义有参构造函数，那么C++不再提供默认无参构造，但是会提供默认拷贝构造</p></li><li><p>如果用户定义拷贝构造函数，C++不会再提供其他构造函数</p></li></ul><h3 id="深拷贝和浅拷贝"><a href="#深拷贝和浅拷贝" class="headerlink" title="深拷贝和浅拷贝"></a>深拷贝和浅拷贝</h3><ul><li><p>浅拷贝：简单的赋值拷贝操作（浅拷贝容易造成堆区的内存重复释放）</p></li><li><p>深拷贝：在堆区重新申请空间，进行拷贝操作</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/*</span><br><span class="hljs-comment">浅拷贝</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">Person</span>(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> h)&#123;<br>    age = a;<br>    height  = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(h);<br>  &#125;<br>  ~<span class="hljs-built_in">Person</span>()&#123;<br>    <span class="hljs-comment">//将堆区开辟的数据释放</span><br>    <span class="hljs-keyword">if</span>(height != Null)&#123;<br>        <span class="hljs-keyword">delete</span> height;<br>        height = Null;<br>    &#125;<br>  &#125;<span class="hljs-comment">//析构函数，释放对象的时候调用</span><br>  <span class="hljs-type">int</span> age;<br>  <span class="hljs-type">int</span> * height;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun1</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-number">18</span>, <span class="hljs-number">160</span>)</span></span><br><span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(p1)</span></span><br><span class="hljs-function">&#125;</span><br><span class="hljs-function"><span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="hljs-function">深拷贝</span></span><br><span class="hljs-comment"><span class="hljs-function">*/</span></span><br><span class="hljs-function"><span class="hljs-keyword">class</span> Person</span>&#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">Person</span>(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> h)&#123;<br>    age = a;<br>    height  = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(h);<br>  &#125;<br>  <span class="hljs-comment">//自己编写深拷贝来解决浅拷贝的问题</span><br>  <span class="hljs-built_in">Person</span>(<span class="hljs-type">const</span> Person &amp;p)&#123;<br>      age = p.age;<br>      height = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(*p.height)<br>  &#125;<br>  ~<span class="hljs-built_in">Person</span>()&#123;<br>    <span class="hljs-comment">//将堆区开辟的数据释放</span><br>    <span class="hljs-keyword">if</span>(height != Null)&#123;<br>        <span class="hljs-keyword">delete</span> height;<br>        height = Null;<br>    &#125;<br>  &#125;<span class="hljs-comment">//析构函数，释放对象的时候调用</span><br>  <span class="hljs-type">int</span> age;<br>  <span class="hljs-type">int</span> * height;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun1</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-number">18</span>, <span class="hljs-number">160</span>)</span></span><br><span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(p1)</span></span><br><span class="hljs-function">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="初始化列表"><a href="#初始化列表" class="headerlink" title="初始化列表"></a>初始化列表</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">//传统赋初值的方法</span><br>    <span class="hljs-comment">//Person(int a, int b, int c)&#123;</span><br>       <span class="hljs-comment">//m_a = a;</span><br>       <span class="hljs-comment">//m_b = b;</span><br>    <span class="hljs-comment">//&#125;</span><br>    <span class="hljs-comment">//初始化列表来赋初值</span><br>    <span class="hljs-built_in">Person</span>(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b):<span class="hljs-built_in">m_a</span>(a), <span class="hljs-built_in">m_b</span>(b)&#123; &#125;<br>    <span class="hljs-type">int</span> m_a;<br>    <span class="hljs-type">int</span> m_b;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun1</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)</span></span><br><span class="hljs-function">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="类对象作为类成员"><a href="#类对象作为类成员" class="headerlink" title="类对象作为类成员"></a>类对象作为类成员</h3><p>C++类中的成员可以是另一个类的对象</p><p>当其他类对象作为本类成员，构造的时候先构造类对象，再构造自身，析构的顺序相反</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Phone</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Phone</span>(string pname)&#123;<br>        m_PName = pname;<br>    &#125;<br>    ~<span class="hljs-built_in">Phone</span>()&#123;<br>        <br>    &#125;<br>    string m_PName;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">//Phone m_Phone = pName  相当于隐式转换法赋初值</span><br>    <span class="hljs-built_in">Person</span>(string name, string pName):<span class="hljs-built_in">m_Name</span>(name), <span class="hljs-built_in">m_Phone</span>(pName)&#123;&#125;<br>    ~<span class="hljs-built_in">Person</span>()&#123;<br>        <br>    &#125;<br>    string m_Name;<br>    Phone m_Phone;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun1</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;aphone&quot;</span>)</span></span><br><span class="hljs-function">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h3><ul><li>静态成员变量<ul><li>所有对象共享同一份数据</li><li>在编译阶段分配内存</li><li>类内声明，类外初始化</li><li>静态成员变量也是有访问权限的</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> m_age;<br>&#125;;<br><span class="hljs-type">int</span> Person::m_age = <span class="hljs-number">100</span>;<span class="hljs-comment">//类外初始化</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun1</span><span class="hljs-params">()</span></span>&#123;<br>    Person p1;<br>    Person p2;<br>    p2.m_age = <span class="hljs-number">200</span>;<br>    cout &lt;&lt; p.m_age &lt;&lt; endl;<span class="hljs-comment">//此时是200，因为所有对象共享同一份数据</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>静态成员函数</p><ul><li><p>所有对象共享同一个函数</p></li><li><p>静态成员函数只能访问静态成员变量</p></li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span>&#123;<br>        m_a = <span class="hljs-number">100</span>;<br>        <span class="hljs-comment">// m_b = 100;//静态成员函数不能访问非静态成员变量</span><br>    &#125;<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> m_a;<br>    <span class="hljs-type">int</span> m_b;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>    Person p;<br>    p.<span class="hljs-built_in">func</span>();<br>    <span class="hljs-comment">//第二种调用方式，func函数是共享的</span><br>    Person::<span class="hljs-built_in">func</span>()<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="成员变量和成员函数分开存储"><a href="#成员变量和成员函数分开存储" class="headerlink" title="成员变量和成员函数分开存储"></a>成员变量和成员函数分开存储</h3><p>空对象占用的内存空间为1字节</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-type">int</span> m_a;<span class="hljs-comment">//非静态成员变量。属于类的对象</span><br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> m_b;<span class="hljs-comment">//静态成员变量，不属于类的对象</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span>&#123;&#125;<span class="hljs-comment">//非静态成员函数，不属于类对象</span><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="this指针"><a href="#this指针" class="headerlink" title="this指针"></a>this指针</h3><p>非静态成员函数存在多个同类型的对象共用一块代码的情况，C++通过this区分是哪个对象调用的。this指针指向<strong>被调用的成员函数所属的对象</strong></p><p>返回对象本身用*this</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-function">Person&amp; <span class="hljs-title">addage</span><span class="hljs-params">(Person &amp;p)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>-&gt;age += p.age;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<span class="hljs-comment">//返回对象本体</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="空指针调用成员函数"><a href="#空指针调用成员函数" class="headerlink" title="空指针调用成员函数"></a>空指针调用成员函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showClassName</span><span class="hljs-params">()</span></span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;hello&quot;</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showPersonAge</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//加一个判断就能正常运行(代码的健壮性)</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span> == <span class="hljs-literal">NULL</span>)<br>            <span class="hljs-keyword">return</span>;<br>        cout &lt;&lt; m_Age;<br>    &#125;<br>    <span class="hljs-type">int</span> m_Age;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>    Person *p = <span class="hljs-literal">NULL</span>;<br>    p-&gt;<span class="hljs-built_in">showClassName</span>();<span class="hljs-comment">//可以运行</span><br>    p-&gt;<span class="hljs-built_in">showPersonAge</span>();<span class="hljs-comment">//不可以运行，因为默认showPersonAge中的m_Age为this-&gt;m_Age。输入上述新加的代码后可运行</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="const修饰成员函数"><a href="#const修饰成员函数" class="headerlink" title="const修饰成员函数"></a>const修饰成员函数</h3><p>常函数：</p><ul><li>常函数内不可以修改成员属性</li><li>成员属性声明时加关键字mutable后，在常函数中依然可以修改</li></ul><p>常对象：</p><ul><li>常对象只能调用常函数</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showPerson</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//this指针的本质是指针常量，指针的指向是不可以修改的，但是指针指向的值可以修改</span><br>        m_A = <span class="hljs-number">100</span>;<span class="hljs-comment">//相当于this-&gt;m_A  = 100;</span><br>        <span class="hljs-comment">//this = NULL //会报错，不可以修改指针指向</span><br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showPerson01</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>&#123;<br>        <span class="hljs-comment">//当加完const之后，指针指向的值也不能修改了</span><br>        <span class="hljs-comment">//m_A = 100;</span><br>        m_B = <span class="hljs-number">100</span>;<span class="hljs-comment">//加关键字mutable后是可以修改的</span><br>    &#125;<br>    <br>    <span class="hljs-type">int</span> m_A;<br>    <span class="hljs-keyword">mutable</span> <span class="hljs-type">int</span> m_B;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>    Person p;<br>    p.<span class="hljs-built_in">showPerson</span>();<br>    <br>    <span class="hljs-comment">//变为常对象</span><br>    <span class="hljs-type">const</span> Person p;<br>    p.m_A;<span class="hljs-comment">//不可修改</span><br>    p.m_B;<span class="hljs-comment">//可修改</span><br>    <span class="hljs-comment">//常对象只能调用常函数</span><br>    p.<span class="hljs-built_in">showPerson01</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-友元"><a href="#3-友元" class="headerlink" title="3. 友元"></a>3. 友元</h2><p>有些私有属性，也想让类外特殊的一些函数或者类访问，就需要友元</p><h3 id="友元函数的三种实现"><a href="#友元函数的三种实现" class="headerlink" title="友元函数的三种实现"></a>友元函数的三种实现</h3><h4 id="1）全局函数做友元"><a href="#1）全局函数做友元" class="headerlink" title="1）全局函数做友元"></a>1）全局函数做友元</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Building</span>&#123;<br>    <span class="hljs-comment">//声明友元，可以访问Building中的私有成员</span><br>    <span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-type">void</span> <span class="hljs-title">bestPerson</span><span class="hljs-params">(Building * building)</span></span><br><span class="hljs-function"><span class="hljs-keyword">public</span>: </span><br><span class="hljs-function">    Building()&#123;</span><br>        m_SittingRoom = <span class="hljs-string">&quot;SittingRoom&quot;</span><br>        m_BedRoom = <span class="hljs-string">&quot;BedRoom&quot;</span><br>    &#125;<br><span class="hljs-keyword">public</span>:    <br>    string m_SittingRoom;<br><span class="hljs-keyword">private</span>:<br>    string m_BedRoom;<br>&#125;;<br><span class="hljs-comment">//全局函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bestPerson</span><span class="hljs-params">(Building * building)</span></span>&#123;<br>    building-&gt;m_SittingRoom;<br>    building-&gt;m_BedRoom;<span class="hljs-comment">//声明friend之后可以访问</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>    Building building;<br>    <span class="hljs-built_in">bestPerson</span>(&amp;building);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2）类做友元"><a href="#2）类做友元" class="headerlink" title="2）类做友元"></a>2）类做友元</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Building</span>;<span class="hljs-comment">//可以先声明</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">bestPerson</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">bestPerson</span>()&#123;<br>        building = <span class="hljs-keyword">new</span> Building;<span class="hljs-comment">//相当于新建了一个Building对象，去调用了Building的构造函数</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">visit</span><span class="hljs-params">()</span></span>&#123;<br>        building-&gt;m_SittingRoom;<br>        building-&gt;m_BedRoom;<span class="hljs-comment">//声明友元类之后可以正常访问BedRoom</span><br>    &#125;<br>    <br>    Building * building;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Building</span>&#123;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bestPerson</span>;<span class="hljs-comment">//声明了一个友元类</span><br><span class="hljs-keyword">public</span>: <br>    <span class="hljs-built_in">Building</span>()&#123;<br>        m_SittingRoom = <span class="hljs-string">&quot;SittingRoom&quot;</span><br>        m_BedRoom = <span class="hljs-string">&quot;BedRoom&quot;</span><br>    &#125;<br><span class="hljs-keyword">public</span>:    <br>    string m_SittingRoom;<br><span class="hljs-keyword">private</span>:<br>    string m_BedRoom;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>    bestPerson fr;<br>    fr.<span class="hljs-built_in">visit</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3）成员函数做友元"><a href="#3）成员函数做友元" class="headerlink" title="3）成员函数做友元"></a>3）成员函数做友元</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Building</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-type">void</span> <span class="hljs-title">bestPerson::visit</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//bestPerson类下的visit成员函数可以访问私有变量</span><br><span class="hljs-keyword">public</span>: <br>    ......<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="4-运算符重载"><a href="#4-运算符重载" class="headerlink" title="4. 运算符重载"></a>4. 运算符重载</h2><h3 id="加号运算符重载"><a href="#加号运算符重载" class="headerlink" title="加号运算符重载"></a>加号运算符重载</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> m_A;<br>    <span class="hljs-type">int</span> m_B;<br>    <span class="hljs-comment">//方式1：通过成员函数重载+号</span><br>    Person <span class="hljs-keyword">operator</span>+(Person &amp;p)&#123;<br>        Person temp;<br>        temp.m_A = <span class="hljs-keyword">this</span>-&gt;m_A + p.m_A;<br>        temp.m_B = <span class="hljs-keyword">this</span>-&gt;m_B + p.m_B;<br>        <span class="hljs-keyword">return</span> temp;<br>    &#125;<br>&#125;;<br><span class="hljs-comment">//方式2：通过全局函数重载</span><br>Person <span class="hljs-keyword">operator</span>+(Person &amp;p1, Person &amp;p2)&#123;<br>    Person temp;<br>    temp.m_A = p1.m_A + p2.m_A;<br>    temp.m_B = p1.m_B + p2.m_B;<br>    <span class="hljs-keyword">return</span> temp;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>    Person p1;<br>    p1.m_A = <span class="hljs-number">10</span>;<br>    p1.m_B = <span class="hljs-number">10</span>;<br>    Person p2;<br>    p2.m_A = <span class="hljs-number">10</span>;<br>    p2.m_B = <span class="hljs-number">10</span>;<br>    <span class="hljs-comment">//重载之后实现对象相加，对于成员函数本质上等同于Person p3 = p1.operator+(p2)</span><br>    Person p3 = p1 + p2;<br>    <span class="hljs-comment">//全局函数等同于Person p3 = operator+(p1,p2)</span><br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="左移运算符重载"><a href="#左移运算符重载" class="headerlink" title="左移运算符重载"></a>左移运算符重载</h3><p>作用：可以输出自定义的数据类型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">friend</span> ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(ostream&amp; out, Person&amp; p);<br><br><span class="hljs-keyword">public</span>:<br><br><span class="hljs-built_in">Person</span>(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)&#123;<br><span class="hljs-keyword">this</span>-&gt;m_A = a;<br><span class="hljs-keyword">this</span>-&gt;m_B = b;<br>&#125;<br><br><span class="hljs-comment">//成员函数 实现不了  p &lt;&lt; cout 不是我们想要的效果</span><br><span class="hljs-comment">//void operator&lt;&lt;(cout)&#123;</span><br><span class="hljs-comment">//&#125;</span><br><br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> m_A;<br><span class="hljs-type">int</span> m_B;<br>&#125;;<br><span class="hljs-comment">//全局函数实现左移重载，本质operator&lt;&lt;(cout, p)，cout是一个ostream对象</span><br><span class="hljs-comment">//ostream对象只能有一个</span><br>ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(ostream&amp; out, Person&amp; p) &#123;<br>out &lt;&lt; <span class="hljs-string">&quot;a:&quot;</span> &lt;&lt; p.m_A &lt;&lt; <span class="hljs-string">&quot; b:&quot;</span> &lt;&lt; p.m_B;<br><span class="hljs-keyword">return</span> out;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>)</span></span>;<br><br>cout &lt;&lt; p1 &lt;&lt; <span class="hljs-string">&quot;hello world&quot;</span> &lt;&lt; endl; <span class="hljs-comment">//链式编程</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++基础知识点</title>
    <link href="/2024/03/31/C-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <url>/2024/03/31/C-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="Part1-数据类型"><a href="#Part1-数据类型" class="headerlink" title="Part1. 数据类型"></a>Part1. 数据类型</h1><h2 id="1-前置知识"><a href="#1-前置知识" class="headerlink" title="1. 前置知识"></a>1. 前置知识</h2><p><strong>变量和常量</strong>：变量存在的意义是为了方便管理内存空间。常量用于记录程序中不可更改的数据。</p><p>C++定义常量两种方式：</p><p>​1、**#define** 宏常量，通常在文件上方定义。</p><p>​2、<strong>const</strong> 修饰的变量，也是常量</p><p>常量不能被修改</p><h2 id="2-各种数据类型"><a href="#2-各种数据类型" class="headerlink" title="2. 各种数据类型"></a>2. 各种数据类型</h2><h4 id="数据类型存在的意义：给变量分配合适的空间"><a href="#数据类型存在的意义：给变量分配合适的空间" class="headerlink" title="数据类型存在的意义：给变量分配合适的空间"></a>数据类型存在的意义：给变量分配合适的空间</h4><ul><li>**<code>sizeof</code>(数据类型 &#x2F; 变量)**：返回占用的内存空间</li></ul><h4 id="实型（浮点型）"><a href="#实型（浮点型）" class="headerlink" title="实型（浮点型）"></a>实型（浮点型）</h4><p>float &#x3D; 4字节 &#x3D; 7位有效数字，double &#x3D; 8字节（15~16位有效数字）。C++中的有效数字（如3.14算作3位有效数字）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">float</span> f1 = <span class="hljs-number">3.12f</span>;<br><span class="hljs-type">double</span> d1 = <span class="hljs-number">3.14</span>;<br></code></pre></td></tr></table></figure><p>对于小数，C++中默认情况下最多保留6位有效数字</p><h4 id="科学计数法"><a href="#科学计数法" class="headerlink" title="科学计数法"></a>科学计数法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">float</span> f2 = <span class="hljs-number">3e2</span>;<span class="hljs-comment">//3*10^2</span><br><span class="hljs-type">float</span> f3 = <span class="hljs-number">3e-2</span>;<span class="hljs-comment">//3*0.1^2</span><br></code></pre></td></tr></table></figure><h4 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">char</span> ch = <span class="hljs-string">&#x27;a&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>C和C++中字符变量只占用1字节</li><li><strong>字符变量并不是字符本身在内存中存储，而是存储字符的ASCII码</strong></li></ul><h4 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h4><p>用于表示一些不能显示出来的ASCII字符</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">cout &lt;&lt; <span class="hljs-string">&quot;C++\n&quot;</span><br>cout &lt;&lt; <span class="hljs-string">&quot;\\&quot;</span><span class="hljs-comment">//输出“\”</span><br>cout &lt;&lt; <span class="hljs-string">&quot;a\t&quot;</span><span class="hljs-comment">//整个占8个字符，如a占了一个，则会补全7个空格</span><br></code></pre></td></tr></table></figure><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p><code>string 变量名 = &quot;字符串值&quot;</code>，需要包含头文件“string”</p><h4 id="bool类型"><a href="#bool类型" class="headerlink" title="bool类型"></a>bool类型</h4><p>占1字节大小，代表0或1</p><h4 id="数据的输入"><a href="#数据的输入" class="headerlink" title="数据的输入"></a>数据的输入</h4><p>语法：<code>cin &gt;&gt; 变量</code></p><h1 id="Part2-运算符"><a href="#Part2-运算符" class="headerlink" title="Part2. 运算符"></a>Part2. 运算符</h1><p>暂无</p><h1 id="Part3-程序流程结构"><a href="#Part3-程序流程结构" class="headerlink" title="Part3. 程序流程结构"></a>Part3. 程序流程结构</h1><h4 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h4><p><code>表达式1 ？表达式2：表达式3</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">(a &gt; b ? a : b) = <span class="hljs-number">100</span>;<span class="hljs-comment">//如果a大于b,返回a,否则返回b,并把a值赋为100</span><br></code></pre></td></tr></table></figure><h4 id="do-while-循环语句"><a href="#do-while-循环语句" class="headerlink" title="do while 循环语句"></a>do while 循环语句</h4><p>do while会先执行一次循环，再判断循环条件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">do</span>&#123;<br>    语句;<br>&#125;<span class="hljs-keyword">while</span>(条件);<br></code></pre></td></tr></table></figure><h1 id="Part4-数组"><a href="#Part4-数组" class="headerlink" title="Part4. 数组"></a>Part4. 数组</h1><h2 id="1、一维数组"><a href="#1、一维数组" class="headerlink" title="1、一维数组"></a>1、一维数组</h2><p>放在一块连续的内存空间中</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> arr[<span class="hljs-number">3</span>];<br><span class="hljs-type">int</span> arr[<span class="hljs-number">3</span>] = &#123;<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>&#125;;<br><span class="hljs-type">int</span> arr[] = &#123;<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>&#125;;<br><br><span class="hljs-type">int</span> arrSize = arr.<span class="hljs-built_in">size</span>();<span class="hljs-comment">//统计数组长度</span><br>cout &lt;&lt; arr<span class="hljs-comment">//输出数组首地址</span><br></code></pre></td></tr></table></figure><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num - <span class="hljs-number">1</span>; i++)&#123;<span class="hljs-comment">//轮数</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; num - i - <span class="hljs-number">1</span>)&#123;<span class="hljs-comment">//元素交换次数</span><br>      <span class="hljs-keyword">if</span>(nums[j] &lt; nums[j + <span class="hljs-number">1</span>])&#123;<br>          <span class="hljs-built_in">swap</span>(nums[j], nums[j + <span class="hljs-number">1</span>]);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2、二维数组"><a href="#2、二维数组" class="headerlink" title="2、二维数组"></a>2、二维数组</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//二维数组的不同遍历方式</span><br><span class="hljs-type">int</span> arr[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>];<br><span class="hljs-type">int</span> arr[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>] = &#123;<br>  &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,<br>  &#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;<br>&#125;;<span class="hljs-comment">//最常用</span><br><span class="hljs-type">int</span> arr[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;;<br><span class="hljs-type">int</span> arr[][<span class="hljs-number">3</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;;<span class="hljs-comment">//能自动识别行数，列数可以省略，但是行数不行</span><br><br><span class="hljs-built_in">sizeof</span>(arr)<span class="hljs-comment">//查看整个数组占用的内存空间</span><br><span class="hljs-built_in">sizeof</span>(arr[<span class="hljs-number">0</span>])<span class="hljs-comment">//第一行元素占用的内存</span><br>cout &lt;&lt; arr &lt;&lt; endl;<span class="hljs-comment">//输出首地址</span><br></code></pre></td></tr></table></figure><h1 id="Part5-函数"><a href="#Part5-函数" class="headerlink" title="Part5. 函数"></a>Part5. 函数</h1><p>函数定义中的变量为<strong>形式参数</strong>，传进来的具体值为<strong>实际参数</strong>。值传递的时候，形参发生改变不会影响到实参</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//函数的常见样式</span><br><span class="hljs-comment">//无参无返</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun</span><span class="hljs-params">()</span></span>&#123;<br>  cout &lt;&lt; <span class="hljs-string">&quot;hello&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">//有参无返</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span>&#123;<br>  cout &lt;&lt; a;<br>&#125;<br><br><span class="hljs-comment">//无参有返</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun</span><span class="hljs-params">()</span></span>&#123;<br>  cout &lt;&lt; <span class="hljs-string">&quot;hello&quot;</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">1000</span>;<br>&#125;<br><br><span class="hljs-comment">//有参有返</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span>&#123;<br>  a += <span class="hljs-number">100</span>;<br>  <span class="hljs-keyword">return</span> a;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1、函数声明"><a href="#1、函数声明" class="headerlink" title="1、函数声明"></a>1、函数声明</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//函数声明的作用是提前告诉编译器函数的存在，一般情况下函数定义不写在主函数后面。可以声明多次，但是定义只有一次</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fun</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>  <br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fun</span><span class="hljs-params">()</span></span>&#123;<br>  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2、函数分文件编写"><a href="#2、函数分文件编写" class="headerlink" title="2、函数分文件编写"></a>2、函数分文件编写</h2><ul><li>创建.h头文件</li><li>创建.cpp源文件</li><li>在头函数中声明</li><li>在源文件中定义</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*funa.h头文件*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fun</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//函数声明</span><br><br><span class="hljs-comment">/*funa.cpp*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;funa.h&quot;</span><span class="hljs-comment">//表明该cpp是和funa.h是相关联的</span></span><br>  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun</span><span class="hljs-params">()</span></span>&#123;<br>  cout &lt;&lt; <span class="hljs-string">&quot;hello&quot;</span><br>&#125;<br><br><span class="hljs-comment">//主函数</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;funa.h&quot;</span><span class="hljs-comment">//调用的时候只需要再引用一次头文件就可以了</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>  <span class="hljs-built_in">fun</span>();<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="Part6-指针"><a href="#Part6-指针" class="headerlink" title="Part6. 指针"></a>Part6. 指针</h1><h2 id="1、指针定义"><a href="#1、指针定义" class="headerlink" title="1、指针定义"></a>1、指针定义</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//定义</span><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> * p = &amp;a;<br><span class="hljs-comment">//解引用</span><br>cout &lt;&lt; *p;<br></code></pre></td></tr></table></figure><h4 id="指针占用的内存空间"><a href="#指针占用的内存空间" class="headerlink" title="指针占用的内存空间"></a>指针占用的内存空间</h4><p>在32位操作系统下占4个字节，84位占八个字节</p><h2 id="2、空指针和野指针"><a href="#2、空指针和野指针" class="headerlink" title="2、空指针和野指针"></a>2、空指针和野指针</h2><p><strong>空指针</strong>：指针变量指向内存中编号为0的内存空间，用于初始化指针变量，且该指针指向的内存是不可以访问的，只能系统访问</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> * p = <span class="hljs-literal">NULL</span>;<br></code></pre></td></tr></table></figure><p><strong>野指针</strong>：指针变量指向非法的内存空间，编译器不会报错，但是编程过程中要避免野指针</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> * p = (<span class="hljs-type">int</span>*)<span class="hljs-number">0x1100</span>;<br></code></pre></td></tr></table></figure><h2 id="3、const修饰指针"><a href="#3、const修饰指针" class="headerlink" title="3、const修饰指针"></a>3、const修饰指针</h2><h3 id="const修饰指针——常量指针"><a href="#const修饰指针——常量指针" class="headerlink" title="const修饰指针——常量指针"></a>const修饰指针——常量指针</h3><p>指针的指向可以修改，但是指针指向的值不可以修改</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">20</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> *p = &amp;a;<br>*p = <span class="hljs-number">20</span>;<span class="hljs-comment">//错误，指针指向的值不可以修改</span><br>p = &amp;b;<span class="hljs-comment">//正确，指针指向可以改</span><br></code></pre></td></tr></table></figure><h3 id="const修饰常量——指针常量"><a href="#const修饰常量——指针常量" class="headerlink" title="const修饰常量——指针常量"></a>const修饰常量——指针常量</h3><p>指针的指向不可以改，但是指针指向的值可以改</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> * <span class="hljs-type">const</span> p = &amp;a;<br>*p = <span class="hljs-number">20</span>;<span class="hljs-comment">//修改指针指向的值</span><br></code></pre></td></tr></table></figure><h3 id="const既修饰指针，又修饰常量"><a href="#const既修饰指针，又修饰常量" class="headerlink" title="const既修饰指针，又修饰常量"></a>const既修饰指针，又修饰常量</h3><p>指针的指向和指针指向的值都不可以改</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> * <span class="hljs-type">const</span> p = &amp;a;<br></code></pre></td></tr></table></figure><h2 id="4、指针和数组"><a href="#4、指针和数组" class="headerlink" title="4、指针和数组"></a>4、指针和数组</h2><p>利用指针来访问数组中的元素</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> arr[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br><span class="hljs-type">int</span> * p = arr;<span class="hljs-comment">//数组的首地址</span><br>p++;<span class="hljs-comment">//让指针向后偏移4个字节，访问数组的第二个元素，因为创建的就是整型的指针</span><br></code></pre></td></tr></table></figure><h2 id="5、指针和函数"><a href="#5、指针和函数" class="headerlink" title="5、指针和函数"></a>5、指针和函数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//地址传递</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-type">int</span>* p1, <span class="hljs-type">int</span>* p2)</span></span>&#123;<br>  <span class="hljs-type">int</span> temp = *p1;<br>  *p1 = *p2;<br>  *p2 = temp;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>  <span class="hljs-type">int</span> a = <span class="hljs-number">10</span>, b = <span class="hljs-number">20</span>;<br>  <span class="hljs-built_in">swap</span>(&amp;a, &amp;b)<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>如何传递数组进函数？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun</span><span class="hljs-params">(<span class="hljs-type">int</span> * arr, <span class="hljs-type">int</span> len)</span></span>&#123;<br>  <br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>  <span class="hljs-built_in">fun</span>(arr, len)<span class="hljs-comment">//数组名就是数组首地址</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Part7-结构体"><a href="#Part7-结构体" class="headerlink" title="Part7. 结构体"></a>Part7. 结构体</h1><p><strong>语法</strong> ：<code>struct 结构体名 &#123;结构体成员列表&#125;;</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span>&#123;<br>  string name;<br>  <span class="hljs-type">int</span> age;<br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">studentCase3</span>&#123;<br>  string name;<br>  <span class="hljs-type">int</span> age;<br>&#125;s3;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>  <span class="hljs-comment">//case1,struct关键字可以省略</span><br>  <span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span> s1;<br>  s1.name = <span class="hljs-string">&quot;stu1&quot;</span>;<br>  <br>  <span class="hljs-comment">//case2</span><br>  <span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span> s2 = &#123;<span class="hljs-string">&quot;stu2&quot;</span>, <span class="hljs-number">16</span>&#125;;<br>  <br>  <span class="hljs-comment">//case3</span><br>  s3.name = <span class="hljs-string">&quot;stu3&quot;</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="结构体数组"><a href="#结构体数组" class="headerlink" title="结构体数组"></a>结构体数组</h3><p><strong>语法</strong>：<code>sturct 结构体名 数组名[元素个数] = &#123; &#123;&#125;, ...,&#123;&#125;&#125;</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span> stdArr[<span class="hljs-number">3</span>] = &#123;<br>  &#123;<span class="hljs-string">&quot;stu1&quot;</span>, <span class="hljs-number">16</span>&#125;<br>  &#123;<span class="hljs-string">&quot;stu2&quot;</span>, <span class="hljs-number">17</span>&#125;<br>  &#123;<span class="hljs-string">&quot;stu3&quot;</span>, <span class="hljs-number">18</span>&#125;<br>&#125;;<br><br>stdArr[<span class="hljs-number">2</span>].name = <span class="hljs-string">&quot;stu4&quot;</span>;<span class="hljs-comment">//访问并修改对应的元素</span><br></code></pre></td></tr></table></figure><h3 id="结构体指针"><a href="#结构体指针" class="headerlink" title="结构体指针"></a>结构体指针</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">student * p = &amp;s;<span class="hljs-comment">//指针指向结构体变量</span><br>cout &lt;&lt; p-&gt;name;<span class="hljs-comment">//利用-&gt;来访问其中的属性</span><br>cout &lt;&lt; p-&gt;age;<br></code></pre></td></tr></table></figure><h3 id="嵌套结构体"><a href="#嵌套结构体" class="headerlink" title="嵌套结构体"></a>嵌套结构体</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span>&#123;<br>  string name;<br>  <span class="hljs-type">int</span> age; <br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">teacher</span>&#123;<br>  <span class="hljs-type">int</span> id;<br>  <span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span> stu;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>  teacher t;<br>  t.id = <span class="hljs-number">1000</span>;<br>  t.stu.name = <span class="hljs-string">&quot;stu1&quot;</span><span class="hljs-comment">//访问结构体中的结构体</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="结构体做函数参数"><a href="#结构体做函数参数" class="headerlink" title="结构体做函数参数"></a>结构体做函数参数</h3><p>与之前同理，值传递不改变实参，地址传递可以修改实参</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//值传递</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> student s)</span></span>&#123;<br>  cout &lt;&lt; s.age;<br>&#125;<br><span class="hljs-comment">//地址传递</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun1</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> student * p)</span></span>&#123;<br>  cout &lt;&lt; p-&gt;name;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>  student stu1;<br>  <span class="hljs-built_in">fun</span>(stu1);<br>  <span class="hljs-built_in">fun</span>(&amp;stu1);<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="结构体中的const"><a href="#结构体中的const" class="headerlink" title="结构体中的const"></a>结构体中的const</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun</span><span class="hljs-params">(<span class="hljs-type">const</span> student * s)</span></span>&#123;<br>  <span class="hljs-comment">//加入const之后，结构体s中的元素将不会被修改，可用于传递不可以修改的实例</span><br>&#125;<br></code></pre></td></tr></table></figure><p>随机数种子</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;ctime&gt;</span></span><br><span class="hljs-built_in">srand</span>((<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)<span class="hljs-built_in">time</span>(<span class="hljs-literal">NULL</span>));<span class="hljs-comment">//随机数种子</span><br><span class="hljs-type">int</span> random = <span class="hljs-built_in">rand</span>() % <span class="hljs-number">61</span> + <span class="hljs-number">40</span><span class="hljs-comment">//随机数出现在40～100之间</span><br></code></pre></td></tr></table></figure><h3 id="一个小案例"><a href="#一个小案例" class="headerlink" title="一个小案例"></a>一个小案例</h3><p>在结构体中有姓名，年龄，性别三个元素，创建结构体数组，数组中包括5个元素，通过冒泡排序，按照年龄对数组元素进行生序排序，最终打印结果</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span>&#123;<br>    string name;<br>    <span class="hljs-type">int</span> age;<br>    <span class="hljs-type">bool</span> sex;<br>&#125;;<br><br><span class="hljs-comment">//结构体数组根据年龄冒泡排序</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bubbleSort</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> student stuArr[], <span class="hljs-type">int</span> len)</span></span>&#123;<span class="hljs-comment">//数组名传递的就是地址，表示传递的是一个结构体数组，所以属于地址传递</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; len - <span class="hljs-number">1</span> - i; j++)&#123;<br>            <span class="hljs-keyword">if</span>(stuArr[j].age &gt; stuArr[j+<span class="hljs-number">1</span>].age)&#123;<br>                <span class="hljs-built_in">swap</span>(stuArr[j], stuArr[j+<span class="hljs-number">1</span>]);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//打印输出</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printArr</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> student stuArr[], <span class="hljs-type">int</span> len)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len;i++)&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;name:&quot;</span> &lt;&lt; stuArr[i].name &lt;&lt; <span class="hljs-string">&quot; age:&quot;</span> &lt;&lt; stuArr[i].age &lt;&lt; <span class="hljs-string">&quot; sex:&quot;</span> &lt;&lt; stuArr[i].sex &lt;&lt; endl;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    student stuArr[<span class="hljs-number">5</span>] = &#123;<br>            &#123;<span class="hljs-string">&quot;stu1&quot;</span>, <span class="hljs-number">23</span>, <span class="hljs-literal">true</span>&#125;,<br>            &#123;<span class="hljs-string">&quot;stu2&quot;</span>, <span class="hljs-number">22</span>, <span class="hljs-literal">true</span>&#125;,<br>            &#123;<span class="hljs-string">&quot;stu3&quot;</span>, <span class="hljs-number">20</span>, <span class="hljs-literal">true</span>&#125;,<br>            &#123;<span class="hljs-string">&quot;stu4&quot;</span>, <span class="hljs-number">21</span>, <span class="hljs-literal">true</span>&#125;,<br>            &#123;<span class="hljs-string">&quot;stu5&quot;</span>, <span class="hljs-number">19</span>, <span class="hljs-literal">false</span>&#125;<br>    &#125;;<br>    <span class="hljs-type">int</span> len = <span class="hljs-built_in">sizeof</span>(stuArr) / <span class="hljs-built_in">sizeof</span>(stuArr[<span class="hljs-number">0</span>]);<br>    <span class="hljs-built_in">bubbleSort</span>(stuArr, len);<br>    <span class="hljs-built_in">printArr</span>(stuArr, len);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="Case1：通讯录管理系统"><a href="#Case1：通讯录管理系统" class="headerlink" title="Case1：通讯录管理系统"></a>Case1：通讯录管理系统</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXNUM = <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Person</span>&#123;<br>    string Name;<br>    <span class="hljs-type">int</span> Age;<br>    string Phonenum;<br><br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Addressbooks</span>&#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Person</span> personArr[MAXNUM];<br>    <span class="hljs-type">int</span> personNum = <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showMenu</span><span class="hljs-params">()</span></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;1. add person&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;2. show person&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;3. delete person&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;4. find person&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;5. revise person&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;6. remove all person&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;0. exit&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;please input your select: &quot;</span>;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addPerson</span><span class="hljs-params">(Addressbooks * abs)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(abs-&gt;personNum == MAXNUM)&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;the number has reached max&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">//add Person</span><br>        string name;<br>        cout &lt;&lt; <span class="hljs-string">&quot;name: &quot;</span>;<br>        cin &gt;&gt; name;<br>        abs-&gt;personArr[abs-&gt;personNum].Name = name;<br><br>        <span class="hljs-type">int</span> age;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;age: &quot;</span>;<br>            cin &gt;&gt; age;<br>            <span class="hljs-keyword">if</span>(age &gt; <span class="hljs-number">0</span> &amp;&amp; age &lt; <span class="hljs-number">120</span>)<br>                <span class="hljs-keyword">break</span>;<br>            cout &lt;&lt; endl &lt;&lt; <span class="hljs-string">&quot;Invalid age&quot;</span> &lt;&lt; endl;<br>        &#125;<br>        abs-&gt;personArr[abs-&gt;personNum].Age = age;<br><br>        string number;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Phonenumber: &quot;</span>;<br>        cin &gt;&gt; number;<br>        abs-&gt;personArr[abs-&gt;personNum].Phonenum = number;<br><br>        abs-&gt;personNum++;<br>        cout &lt;&lt; <span class="hljs-string">&quot;add success&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-comment">//system(&quot;clear&quot;);</span><br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showPerson</span><span class="hljs-params">(Addressbooks * abs)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(abs-&gt;personNum == <span class="hljs-number">0</span>)<br>        cout &lt;&lt; <span class="hljs-string">&quot;the addressbooks is empty&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; abs-&gt;personNum; i++)&#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;name: &quot;</span> &lt;&lt; abs-&gt;personArr[i].Name &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span>;<br>            cout &lt;&lt; <span class="hljs-string">&quot;age: &quot;</span> &lt;&lt; abs-&gt;personArr[i].Age &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span>;<br>            cout &lt;&lt; <span class="hljs-string">&quot;Phonenumber: &quot;</span> &lt;&lt; abs-&gt;personArr[i].Phonenum &lt;&lt; endl;<br>        &#125;<br>&#125;<br><br><span class="hljs-comment">//if existed, return location, else return -1</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">isExist</span><span class="hljs-params">(Addressbooks * abs, string name)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; abs-&gt;personNum; i++)&#123;<br>        <span class="hljs-keyword">if</span>(abs-&gt;personArr[i].Name == name)<br>            <span class="hljs-keyword">return</span> i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">deletePerson</span><span class="hljs-params">(Addressbooks * abs)</span></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;please input the name you want to delete: &quot;</span>;<br>    string name;<br>    cin &gt;&gt; name;<br>    <span class="hljs-type">int</span> locate = <span class="hljs-built_in">isExist</span>(abs, name);<br>    <span class="hljs-keyword">if</span> (locate == <span class="hljs-number">-1</span>)<br>        cout &lt;&lt; <span class="hljs-string">&quot;can&#x27;t find the person&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = locate; i &lt; abs-&gt;personNum; i++)&#123;<br>            abs-&gt;personArr[i] = abs-&gt;personArr[i + <span class="hljs-number">1</span>];<br>        &#125;<br>        abs-&gt;personNum--;<br>        cout &lt;&lt; <span class="hljs-string">&quot;delete success&quot;</span>&lt;&lt; endl;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">findPerson</span><span class="hljs-params">(Addressbooks * abs)</span></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;please input name: &quot;</span>;<br>    string name;<br>    cin &gt;&gt; name;<br>    <span class="hljs-type">int</span> locate = <span class="hljs-built_in">isExist</span>(abs, name);<br>    <span class="hljs-keyword">if</span>(locate == <span class="hljs-number">-1</span>)<br>        cout &lt;&lt; <span class="hljs-string">&quot;can&#x27;t find the person&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">else</span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;name: &quot;</span> &lt;&lt; abs-&gt;personArr[locate].Name &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span>;<br>        cout &lt;&lt; <span class="hljs-string">&quot;age: &quot;</span> &lt;&lt; abs-&gt;personArr[locate].Age &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span>;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Phonenumber: &quot;</span> &lt;&lt; abs-&gt;personArr[locate].Phonenum &lt;&lt; endl;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">revisePerson</span><span class="hljs-params">(Addressbooks * abs)</span></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;please input the modified person: &quot;</span>;<br>    string name;<br>    cin &gt;&gt; name;<br>    <span class="hljs-type">int</span> locate = <span class="hljs-built_in">isExist</span>(abs, name);<br>    <span class="hljs-keyword">if</span>(locate == <span class="hljs-number">-1</span>)<br>        cout &lt;&lt; <span class="hljs-string">&quot;can&#x27;t find the preson&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">else</span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;name: &quot;</span>;<br>        cin &gt;&gt; name;<br>        abs-&gt;personArr[locate].Name = name;<br><br>        <span class="hljs-type">int</span> age;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;age: &quot;</span>;<br>            cin &gt;&gt; age;<br>            <span class="hljs-keyword">if</span>(age &gt; <span class="hljs-number">0</span> &amp;&amp; age &lt; <span class="hljs-number">120</span>)<br>                <span class="hljs-keyword">break</span>;<br>            cout &lt;&lt; endl &lt;&lt; <span class="hljs-string">&quot;Invalid age&quot;</span> &lt;&lt; endl;<br>        &#125;<br>        abs-&gt;personArr[locate].Age = age;<br><br>        string number;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Phonenumber: &quot;</span>;<br>        cin &gt;&gt; number;<br>        abs-&gt;personArr[locate].Phonenum = number;<br><br>        cout &lt;&lt; <span class="hljs-string">&quot;revise success&quot;</span> &lt;&lt; endl;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">clearAddr</span><span class="hljs-params">(Addressbooks * abs)</span></span>&#123;<br>    abs-&gt;personNum = <span class="hljs-number">0</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;successful clear&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Addressbooks addrbooks;<br><br>    <span class="hljs-type">int</span> select = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>        <span class="hljs-built_in">showMenu</span>();<br>        cin &gt;&gt; select;<br>        <span class="hljs-keyword">switch</span>(select)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                <span class="hljs-built_in">addPerson</span>(&amp;addrbooks);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                <span class="hljs-built_in">showPerson</span>(&amp;addrbooks);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                <span class="hljs-built_in">deletePerson</span>(&amp;addrbooks);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>                <span class="hljs-built_in">findPerson</span>(&amp;addrbooks);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>                <span class="hljs-built_in">revisePerson</span>(&amp;addrbooks);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>                <span class="hljs-built_in">clearAddr</span>(&amp;addrbooks);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                cout &lt;&lt; <span class="hljs-string">&quot;bye~&quot;</span>;<br>                <span class="hljs-built_in">getchar</span>();<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">default</span>:<br>                cout &lt;&lt; <span class="hljs-string">&quot;Invalid choice. Please try again.&quot;</span> &lt;&lt; endl;<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-comment">//cin.ignore();</span><br>        <span class="hljs-comment">//cin.get();</span><br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode面试150题——简单题</title>
    <link href="/2024/03/16/leetcode%E9%9D%A2%E8%AF%95150%E9%A2%98%E2%80%94%E2%80%94%E7%AE%80%E5%8D%95%E9%A2%98/"/>
    <url>/2024/03/16/leetcode%E9%9D%A2%E8%AF%95150%E9%A2%98%E2%80%94%E2%80%94%E7%AE%80%E5%8D%95%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="数组-字符串"><a href="#数组-字符串" class="headerlink" title="数组&#x2F;字符串"></a>数组&#x2F;字符串</h1><h2 id="题14-最长公共前缀"><a href="#题14-最长公共前缀" class="headerlink" title="题14.最长公共前缀"></a>题14.最长公共前缀</h2><blockquote><p><strong>题目描述</strong>：编写一个函数来查找字符串数组中的最长公共前缀。如果不存在公共前缀，返回空字符串 <code>&quot;&quot;</code>。</p><p><strong>示例 1：</strong></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm">输入：<span class="hljs-keyword">strs</span> = [<span class="hljs-string">&quot;flower&quot;</span>,<span class="hljs-string">&quot;flow&quot;</span>,<span class="hljs-string">&quot;flight&quot;</span>]<br>输出：<span class="hljs-string">&quot;fl&quot;</span><br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs armasm">输入：<span class="hljs-keyword">strs</span> = [<span class="hljs-string">&quot;dog&quot;</span>,<span class="hljs-string">&quot;racecar&quot;</span>,<span class="hljs-string">&quot;car&quot;</span>]<br>输出：<span class="hljs-string">&quot;&quot;</span><br>解释：输入不存在公共前缀。<br></code></pre></td></tr></table></figure></blockquote><p>​<strong>低配版解法</strong>：初始化公共前缀为第一个字符串。循环遍历字符串，当前字符串B和公共前缀A进行比较，子循环以B的长度为上界，逐个字符进行比较，直到字符不相等。若A还有剩余，则删掉A剩下的元素(后面为多出来的不相等的部分)，以此类推，直到遍历完字符串。</p><p>​解题的时候考虑两类特殊情况：1）若该字符串数组中仅有一个字符串，则直接返回该字符串（最开始判断即可）。2）所有字符串都不一样，即不存在公共前缀。由于默认数组中的第一个字符串为第一个公共前缀，且公共前缀中会一直存储内容。因此需要设置一个flag位，来应对这种情况，若在while循环处，每一个字符都不想等，只要这种情况存在，即j&#x3D;0，则将flag置为1，这种情况下一定不存在公共前缀。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">longestCommonPrefix</span><span class="hljs-params">(vector&lt;string&gt;&amp; strs)</span> </span>&#123;<br>        string s;<br>        string common_str = strs[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">int</span> i, j;<br>        <span class="hljs-type">int</span> flag = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(strs.<span class="hljs-built_in">size</span>() == <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">return</span> common_str;<br>        <span class="hljs-keyword">for</span>(i = <span class="hljs-number">1</span>; i &lt; strs.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            s = strs[i];<br>            j = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span>(s[j] == common_str[j] <span class="hljs-keyword">and</span> j &lt; s.<span class="hljs-built_in">size</span>())&#123;<br>                j++;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(j == <span class="hljs-number">0</span>)&#123;<br>                flag = <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            j--;<br>            <span class="hljs-keyword">if</span>(j &lt; common_str.<span class="hljs-built_in">size</span>())<br>                common_str.<span class="hljs-built_in">erase</span>(j + <span class="hljs-number">1</span>, common_str.<span class="hljs-built_in">size</span>()-j);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(flag == <span class="hljs-number">1</span>)<br>            common_str = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">return</span> common_str;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>官方题解：</p><p>总体上思路类似（泪目了，难得）。但是在处理没有最长公共前缀的情况下，官方用了<code>return str1.substr(0, index)</code>，直接将重叠的部分用<code>substr</code>函数覆盖，学到了学到了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">longestCommonPrefix</span><span class="hljs-params">(vector&lt;string&gt;&amp; strs)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!strs.<span class="hljs-built_in">size</span>()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>        &#125;<br>        string prefix = strs[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">int</span> count = strs.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; count; ++i) &#123;<br>            prefix = <span class="hljs-built_in">longestCommonPrefix</span>(prefix, strs[i]);<br>            <span class="hljs-keyword">if</span> (!prefix.<span class="hljs-built_in">size</span>())<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> prefix;<br>    &#125;<br>    <span class="hljs-function">string <span class="hljs-title">longestCommonPrefix</span><span class="hljs-params">(<span class="hljs-type">const</span> string&amp; str1, <span class="hljs-type">const</span> string&amp; str2)</span> </span>&#123;<br>        <span class="hljs-type">int</span> length = <span class="hljs-built_in">min</span>(str1.<span class="hljs-built_in">size</span>(), str2.<span class="hljs-built_in">size</span>());<br>        <span class="hljs-type">int</span> index = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (index &lt; length &amp;&amp; str1[index] == str2[index]) &#123;<br>            ++index;<br>        &#125;<br>        <span class="hljs-keyword">return</span> str1.<span class="hljs-built_in">substr</span>(<span class="hljs-number">0</span>, index);<br>    &#125;<br>&#125;;<br>作者：力扣官方题解<br>链接：https:<span class="hljs-comment">//leetcode.cn/problems/longest-common-prefix/solutions/288575/zui-chang-gong-gong-qian-zhui-by-leetcode-solution/</span><br>来源：力扣（LeetCode）<br></code></pre></td></tr></table></figure><h1 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h1><h2 id="题383-赎金信"><a href="#题383-赎金信" class="headerlink" title="题383.赎金信"></a>题383.赎金信</h2><blockquote><p>给你两个字符串：<code>ransomNote</code> 和 <code>magazine</code> ，判断 <code>ransomNote</code> 能不能由 <code>magazine</code> 里面的字符构成。</p><p>如果可以，返回 <code>true</code> ；否则返回 <code>false</code> 。</p><p><code>magazine</code> 中的每个字符只能在 <code>ransomNote</code> 中使用一次。</p><p><strong>示例 1：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">输入：ransomNote = <span class="hljs-string">&quot;a&quot;</span>, magazine = <span class="hljs-string">&quot;b&quot;</span></span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">输出：<span class="hljs-literal">false</span></span><br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">输入：ransomNote = <span class="hljs-string">&quot;aa&quot;</span>, magazine = <span class="hljs-string">&quot;ab&quot;</span></span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">输出：<span class="hljs-literal">false</span></span><br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">输入：ransomNote = <span class="hljs-string">&quot;aa&quot;</span>, magazine = <span class="hljs-string">&quot;aab&quot;</span></span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">输出：<span class="hljs-literal">true</span></span><br></code></pre></td></tr></table></figure></blockquote><p>第一次做hash表的题，暂时没有想到很好的思路，以为是不是有什么不知道的哈希表相关操作，所以直接看<strong>官方题解</strong>了：</p><p><code>ransomNote</code>为待构建的字符串，由于<code>ransomNote</code>中的字符只能使用一次，只需要<code>magazine</code>中的每个英文字母的统计次数都大于<code>ransomNote</code>中字母的统计次数。首先排除特殊情况，如果<code>ransomNote</code>的字符数大于<code>magazine</code>，则显然不能构成。否则首先统计<code>magzine</code>中的字符统计，记录在一个向量中，随后遍历<code>ransomNote</code>，出现一次，就在cnt中-1（这里还是很巧妙的），如果cnt中存在字母的统计量为负，则<code>false</code>，否则<code>true</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">canConstruct</span><span class="hljs-params">(string ransomNote, string magazine)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (ransomNote.<span class="hljs-built_in">size</span>() &gt; magazine.<span class="hljs-built_in">size</span>()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">cnt</span><span class="hljs-params">(<span class="hljs-number">26</span>)</span></span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp; c : magazine) &#123;<br>            cnt[c - <span class="hljs-string">&#x27;a&#x27;</span>]++;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp; c : ransomNote) &#123;<br>            cnt[c - <span class="hljs-string">&#x27;a&#x27;</span>]--;<br>            <span class="hljs-keyword">if</span> (cnt[c - <span class="hljs-string">&#x27;a&#x27;</span>] &lt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;;<br><br>作者：力扣官方题解<br>链接：https:<span class="hljs-comment">//leetcode.cn/problems/ransom-note/solutions/1135839/shu-jin-xin-by-leetcode-solution-ji8a/</span><br>来源：力扣（LeetCode）<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记录一哈C++学习规划</title>
    <link href="/2024/03/10/%E8%AE%B0%E5%BD%95%E4%B8%80%E5%93%88C-%E5%AD%A6%E4%B9%A0%E8%A7%84%E5%88%92/"/>
    <url>/2024/03/10/%E8%AE%B0%E5%BD%95%E4%B8%80%E5%93%88C-%E5%AD%A6%E4%B9%A0%E8%A7%84%E5%88%92/</url>
    
    <content type="html"><![CDATA[<h1 id="C-学习规划"><a href="#C-学习规划" class="headerlink" title="C++学习规划"></a>C++学习规划</h1><h2 id="第一步：基础"><a href="#第一步：基础" class="headerlink" title="第一步：基础"></a>第一步：基础</h2><h3 id="基础类（必看）"><a href="#基础类（必看）" class="headerlink" title="基础类（必看）"></a>基础类（必看）</h3><p>《C程序设计语言》</p><p>1、学习指针，了解到了内存管理最基本的东西，给以后学操作系统课程有一个印象。</p><p>2、学习从代码到可执行程序，了解整个代码到生成产物的过程，给以后学编译原理埋下伏笔。</p><p>一些学习用的网站</p><ul><li>W3Cschool教程：<a href="https://www.w3cschool.cn/cpp/">https://www.w3cschool.cn/cpp/</a></li><li>菜鸟教程：<a href="https://www.runoob.com/cplusplus/cpp-tutorial.html">https://www.runoob.com/cplusplus/cpp-tutorial.html</a></li></ul><p>《C++ Primer》</p><p>不懂的地方时常去翻一翻</p><p>![image-20240311212053425](C:\Users\Yuxin Song\Blog_hexo\hexo-blog\source_posts\记录一哈C-学习规划\image-20240311212053425.png)</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂七杂八</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>这是一个很短的Flag......</title>
    <link href="/2024/03/10/%E8%BF%99%E6%98%AF%E4%B8%80%E4%B8%AA%E5%BE%88%E7%9F%AD%E7%9A%84Flag/"/>
    <url>/2024/03/10/%E8%BF%99%E6%98%AF%E4%B8%80%E4%B8%AA%E5%BE%88%E7%9F%AD%E7%9A%84Flag/</url>
    
    <content type="html"><![CDATA[<p>今天你Ctrl+C了吗？</p><img src="2024/03/10/%E8%BF%99%E6%98%AF%E4%B8%80%E4%B8%AA%E5%BE%88%E7%9F%AD%E7%9A%84Flag/wallhaven-p8j1zm.jpg" class="" title="This is an example image">]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/03/10/hello-world/"/>
    <url>/2024/03/10/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
